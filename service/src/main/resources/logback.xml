<?xml version="1.0" encoding="UTF-8"?>
<!-- Logback 메인 설정 파일 -->
<configuration>
    <!-- 스프링 환경변수를 logback 설정에서 사용할 수 있도록 로드 -->
    <springProperty scope="context" name="SERVER_URL" source="SERVER_URL"/>
    <springProperty scope="context" name="REDIS_PASSWORD" source="REDIS_PASSWORD"/>

    <!-- 전역적으로 사용할 로그 패턴 정의 -->
    <!-- LOG_PATTERN: 일반적인 로그 출력을 위한 패턴
         - %d{yyyy-MM-dd HH:mm:ss.SSS}: 날짜/시간
         - [%thread]: 현재 스레드 이름
         - %-5level: 로그 레벨 (5자리로 맞춤)
         - %logger{36}: 로거 이름 (최대 36자)
         - %msg: 실제 로그 메시지
         - %n: 줄바꿈 -->
    <property name="LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"/>

    <!-- ELK 스택 분석을 위한 JSON 형식의 로그 패턴 -->
    <property name="LOG_PATTERN_JSON" value='{"timestamp":"%d{ISO8601}","level":"%level","thread":"%thread","logger":"%logger","message":"%message","exception":"%exception"}%n'/>

    <!-- 콘솔 출력을 위한 Appender -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- Redis로 로그를 전송하기 위한 Appender -->
    <appender name="REDIS" class="com.cwbase.logback.RedisAppender">
        <!-- Redis 서버 연결 정보 -->
        <host>${SERVER_URL}</host>
        <port>6379</port>
        <password>${REDIS_PASSWORD}</password>
        <key>logstash</key>    <!-- Logstash가 수집할 Redis key -->
        <type>redis</type>
        <!-- Logstash 포맷으로 로그 구조화 -->
        <layout class="net.logstash.logback.layout.LogstashLayout">
            <includeMdc>true</includeMdc>          <!-- MDC(Mapped Diagnostic Context) 정보 포함 -->
            <includeContext>true</includeContext>  <!-- Logback Context 정보 포함 -->
            <customFields>{"application":"smart-office"}</customFields>
        </layout>
    </appender>

    <!-- Redis Appender의 비동기 처리를 위한 래퍼 -->
    <appender name="ASYNC_REDIS" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="REDIS" />
        <queueSize>512</queueSize>                <!-- 로그 이벤트 큐 크기 -->
        <discardingThreshold>0</discardingThreshold>  <!-- 큐가 가득 찼을 때 로그 유실 방지 -->
        <includeCallerData>true</includeCallerData>   <!-- 호출자 정보 포함 -->
        <neverBlock>true</neverBlock>                 <!-- 로그 처리로 인한 애플리케이션 블로킹 방지 -->
    </appender>

    <!-- SQL 전용 콘솔 출력 Appender -->
    <appender name="SQL_CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>[SQL] ${LOG_PATTERN}</pattern>  <!-- SQL 로그 구분을 위한 prefix 추가 -->
        </encoder>
    </appender>

    <!-- 특정 패키지별 로그 레벨 및 출력 설정 -->
    <!-- additivity="false": 상위 로거로의 전파 방지 -->

    <!-- Hibernate SQL 쿼리 로깅 -->
    <logger name="org.hibernate.SQL" level="DEBUG" additivity="false">
        <appender-ref ref="SQL_CONSOLE" />
        <appender-ref ref="ASYNC_REDIS" />
    </logger>

    <!-- Hibernate SQL 파라미터 로깅 -->
    <logger name="org.hibernate.type.descriptor.sql" level="TRACE" additivity="false">
        <appender-ref ref="SQL_CONSOLE" />
        <appender-ref ref="ASYNC_REDIS" />
    </logger>

    <!-- Google Cloud Storage 로깅 -->
    <logger name="com.google.cloud.storage" level="DEBUG" additivity="false">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="ASYNC_REDIS" />
    </logger>

    <!-- 애플리케이션 코드 로깅 -->
    <logger name="com.office" level="DEBUG" additivity="false">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="ASYNC_REDIS" />
    </logger>

    <!-- Spring Web 관련 로깅 -->
    <logger name="org.springframework.web" level="DEBUG" additivity="false">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="ASYNC_REDIS" />
    </logger>

    <!-- 기본 로거 설정 (위의 logger에 포함되지 않는 모든 로그) -->
    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="ASYNC_REDIS" />
    </root>

</configuration>