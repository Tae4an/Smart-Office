plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.11'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.github.node-gradle.node' version '2.2.4'
}

group = 'com.office'
version = '0.2.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
    // Spring Boot Web Starter: 웹 애플리케이션 개발을 위한 기본 의존성
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.projectlombok:lombok:1.18.26'

    // Lombok: 반복적인 코드를 줄이기 위한 어노테이션 기반 라이브러리
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Spring Security:  보안 의존성
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // Spring Boot DevTools: 개발 생산성 향상을 위한 도구
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Spring Boot Test: 스프링 부트 애플리케이션 테스트를 위한 의존성
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // JUnit Platform Launcher: JUnit 테스트 실행을 위한 런타임 의존성
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Spring Boot Validation: 데이터 유효성 검사를 위한 의존성
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Spring Security Test: 보안 관련 테스트를 위한 의존성
    testImplementation 'org.springframework.security:spring-security-test'

    // WebSocket: 실시간 양방향 통신을 위한 의존성
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.webjars:webjars-locator-core'
    implementation 'org.webjars:sockjs-client:1.5.1'
    implementation 'org.webjars:stomp-websocket:2.3.4'

    // Jackson: JSON 처리를 위한 라이브러리
    implementation 'com.fasterxml.jackson.core:jackson-databind'

    // Jasypt: 설정 파일 암호화를 위한 라이브러리
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.3'

    // Spring Dotenv: .env 파일을 사용한 환경 변수 관리
    implementation 'me.paulschwarz:spring-dotenv:2.5.4'

    // JPA: 자바 ORM 기술 표준
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // Log4jdbc: SQL 로깅을 위한 라이브러리
    implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'

    // MySQL Connector: MySQL 데이터베이스 연결을 위한 드라이버
    implementation 'com.mysql:mysql-connector-j:8.0.33'

    // Google Cloud Storage: GCS 사용을 위한 의존성
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter', version: '1.2.5.RELEASE'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-gcp-storage', version: '1.2.5.RELEASE'

    // WebFlux: 리액티브 웹 애플리케이션 개발을 위한 의존성
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // Swagger: API 문서화를 위한 도구
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

    // Jakarta Activation API 의존성
    implementation 'jakarta.activation:jakarta.activation-api:2.1.3'
    implementation 'com.sun.activation:jakarta.activation:2.0.1'

    // Spring Data Redis: 스프링에서 Redis를 쉽게 사용할 수 있게 해주는 모듈
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // Logback Redis Appender: Logback 로그를 Redis로 전송하기 위한 Appender
    implementation 'com.cwbase:logback-redis-appender:1.1.6'

    // Jedis: Redis의 Java 클라이언트 라이브러리
    implementation 'redis.clients:jedis:3.1.0'

    // Logback Classic: SLF4J의 구현체인 로깅 프레임워크
    implementation 'ch.qos.logback:logback-classic'

    // Logstash Logback Encoder: Logback 로그를 Logstash 포맷으로 인코딩
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'

    // Spring Boot Starter Actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Spring AOP (AspectJ)
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // Spring Retry 라이브러리
    // 선언적 재시도 지원 및 RetryTemplate 등의 기능 제공
    implementation 'org.springframework.retry:spring-retry'

    // Spring AOP 지원 라이브러리
    // @Retryable 어노테이션 사용을 위한 AOP 기능 제공
    implementation 'org.springframework:spring-aspects'


    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.awaitility:awaitility:4.2.0'

    // Spring Boot의 캐싱 기능을 사용하기 위한 의존성
    implementation 'org.springframework.boot:spring-boot-starter-cache'



}

node {
    version = '22.11.0'
    download = true
    workDir = file("${project.buildDir}/nodejs")
    npmWorkDir = file("${project.buildDir}/npm")
    nodeModulesDir = file("${project.projectDir}/../front")
}

def frontDir = "$projectDir/../front"

tasks.register('installReactDeps', NpmTask) {
    workingDir = file(frontDir)
    args = ['install']
}

tasks.register('buildReact', NpmTask) {
    dependsOn installReactDeps
    workingDir = file(frontDir)
    args = ['run', 'build']
}

tasks.register('copyReactBuild', Copy) {
    dependsOn buildReact
    from("${frontDir}/build") {
        include "**/*"
    }
    into "${projectDir}/src/main/resources/static"
}

processResources {
    dependsOn copyReactBuild
}

bootJar {
    dependsOn copyReactBuild
}

test {
    useJUnitPlatform()
}

configurations.configureEach {
    exclude group: 'commons-logging', module: 'commons-logging'
}